
== Licensing ==
- All compiler source files must be licensed under GPLv2
- All runtime source files must be licensed under Zlib license
	

== File names ==
- All file names must be unique across the whole source tree. Names must be
lower case and should not include any punctuation characters.


== Header files ==
- Every .c or .cpp file should have an associated .h file. The header file
should only expose public members in its paired source file; do not use a
single header file to publish members implemented across multiple source files.
- Header files must have #ifndef/#define guard macros. The symbol name must be
the same as the header name, with ".h" replaced by "_h".
- Header files MAY NOT include any 'using namespace' directives.


== Formatting ==
- Use tabs to indent code and spaces to align columns.
- Each line should be no more than 80 columns long.

- The return type goes on the same line as the function name, and parameters go
on the same line if they fit.
- If a function declaration is too long to fit on one line, first try moving
all of the parameters to a second line, double-indented. If the parameter line
is then also too long to fit on a single line, break each parameter onto its 
own line, all at the same double-indent under the declaration line.
- The function's open-parenthesis stays on the same line as the function's name.
- The closing parenthesis sticks with the last (rightmost) parameter.
- If a "const" keyword is present, it stays with the closing parenthesis.

- Function calls should be formatted similarly. Try to fit them all on one line.
If they do not fit on a line, move the arguments to the next line, with a
double indent. If the arguments line is too long, break each argument onto its
own line, all double-indented below the line with the function name.

- Complex expressions which do not fit on a line may be split up after each
binary operator. Hanging lines must be double-indented.

- When an assignment statement is too long to fit on one line, first try to
make it fit by putting the RHS expression (the value being assigned) onto a
second line, with the usual double-indent. If the assigned expression is too
long for its own line, try to put it back on the assignment line before
breaking it down further. 

- Function call argument lists should have one space after the opening
parenthesis, one space after each comma, and one space before the closing
parenthesis. 

- Conditional expressions (if, else, switch) should not have a space following
the leading or preceding the trailing parenthesis.

- The opening brace for a class or function goes on the line following the
declaration, indented at the same level as the declaration; the following line
should be indented one level in.

- The opening brace for a conditional block follows the condition on the same 
line; it does not move to the next line as a function's opening brace does.


== Names ==

- Be consistent. Avoid abbreviation. Try to use verbs for function names and
nouns for class or variable names.

- Class and function names should start with an uppercase character. Variable
names should start with a lowercase character. 

- Private and protected class data members should start with an underscore.

- Constants should start with a lowercase "k".


== Classes ==

- A class which defines member variables must define a constructor which
explicitly initializes those variables. Initializers should come in the same
order as the variable declarations.

- Avoid structs. Structs must never have methods.

- Multiple inheritance is forbidden, except for the specific case when all but
one base class are pure virtual classes (following the "interface" pattern).

- Avoid inheritance, in general. Composition is better. Base classes must
always be inherited 'public'.

- Data members should be private whenever possible. If the data must be 
available to subclasses, try to expose them through protected accessor methods.

- Group all like-scoped declarations: a class should begin with a declaration
of all of its public members, followed by a declaration of all of its protected
members, if any, followed by a declaration of all of its private members, if
any. Do not include more than one "public:", "protected:", or "private:" group
in a single class declaration.


== Comments ==

- Use C++ style comments for explanatory text.
- Do not comment out old code. Delete it instead. 


== Various C++ Features ==

- Reference parameters must be const. If a method may modify a parameter, pass
the parameter in as a pointer instead.

- Avoid function overloading. It is acceptable when the function is simply
going to combine a list of values in some way independent of their number, but
a method name which includes the number of parameters is still usually better.

- Avoid default argument values.

- Use explicit C++ style template casts; avoid traditional C-style casts.

- Methods should be const whenever possible.


