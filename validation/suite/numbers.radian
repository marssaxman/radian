#!/usr/bin/env radian

import number from radian

# simple positive integer arithmetic
assert 1 + 1 = 2
assert 1 - 1 = 0
assert 42 - 19 = 23
assert 1001001 + 1001001 = 2002002
assert 9 * 8 = 72
assert 8 / 2 = 4
assert 1000 / 10 = 100
assert 12 mod 4 = 0
assert 12 mod 5 = 2

# let's go negative
assert 42 - 96 = -54
assert -54 - -18 = -36
assert -17 * -17 = 289
assert -4 + 1 = -3
assert 150 / -3 = -50
assert -150 / 3 = -50
assert -150 / -3 = 50

# move beyond the domain of integers to the rationals
assert 2.5 = 5 / 2
assert 5 / 2 = (1/2) * 5
assert 5 / 2 * 2 = 5
assert (109 / 8) * 1000 = 13625
assert 109 / 8 = 13.625
assert (1/3) + (1/3) = 2/3
assert (1/4) + (1/2) = 0.75

# rationals and signs
assert 1/4 - 1/2 = -1/4
assert 1/3 - 2/3 = -(1/3)

# make sure integer & rational interactions have the right type
var rez = 1 + 5/3
assert rez.is_number and rez.is_rational and not rez.is_integer
assert rez = 8/3
rez = rez * 3
assert rez = 8 and rez.is_integer

rez = 5/3 + 1
assert rez.is_number and rez.is_rational and not rez.is_integer
assert rez = 8/3
rez = 3 * rez
assert rez = 8 and rez.is_integer

rez = 5/3 - 1
assert rez.is_number and rez.is_rational and not rez.is_integer
assert rez = 2/3
rez = rez * 3
assert rez = 2 and rez.is_integer

rez = 8 - 5/3
assert rez.is_number and rez.is_rational and not rez.is_integer
assert rez = 19/3
rez = 3 * rez
assert rez = 19 and rez.is_integer

rez = 2.5 / 2
assert rez.is_number and rez.is_rational and not rez.is_integer
assert rez = 1.25
rez = rez / 0.25
assert rez = 5 and rez.is_integer

# let's try some exponentiation
#...integer base, integer exponent
assert 2 ** 3 = 8
assert 2 ** -2 = 0.25
#...rational base, integer exponent
assert 2.5 ** 2 = 6.25
assert (5/4) ** -3 = 0.512

# Get some fractional exponents in here so we can exercise floats
def sqrt2 = 2 ** 0.5
assert sqrt2.is_number and not sqrt2.is_rational
def real2 = sqrt2 ** 2
assert real2.is_number and not real2.is_rational

